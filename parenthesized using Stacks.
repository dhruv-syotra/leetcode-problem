#include <stdio.h>
#include <stdlib.h>
#define MAX 100
typedef struct {
    char data[MAX];
    int top;
} Stack;

void initialize(Stack *stack) {
    stack->top = -1;
}
int isEmpty(Stack *stack) {
    return stack->top == -1;
}
int isFull(Stack *stack) {
    return stack->top == MAX - 1;
}
void push(Stack *stack, char ch) {
    if (isFull(stack)) {
        printf("Stack Overflow!\n");
        exit(1);
    }
    stack->data[++stack->top] = ch;
}
char pop(Stack *stack) {
    if (isEmpty(stack)) {
        return '\0';  
    }
    return stack->data[stack->top--];
}
char peek(Stack *stack) {
    if (isEmpty(stack)) {
        return '\0';
    }
    return stack->data[stack->top];
}
int isMatchingPair(char open, char close) {
    return (open == '(' && close == ')') ||
           (open == '{' && close == '}') ||
           (open == '[' && close == ']');
}

int isBalanced(char *expr) {
    Stack stack;
    initialize(&stack);
    for (int i = 0; expr[i] != '\0'; i++) {
        char ch = expr[i];
        if (ch == '(' || ch == '{' || ch == '[') {
            push(&stack, ch);
        } else if (ch == ')' || ch == '}' || ch == ']') {
            if (isEmpty(&stack) || !isMatchingPair(pop(&stack), ch)) {
                return 0;  // Not balanced
            }
        }
    }

    return isEmpty(&stack); 
}
int main() {
    char expr[100];
    printf("Enter an expression: ");
    scanf("%s", expr);
    if (isBalanced(expr)) {
        printf("The expression is correctly parenthesized.\n");
    } else {
        printf("The expression is NOT correctly parenthesized.\n");
    }
    return 0;
}
