#include <stdio.h>
#include<stdlib.h>
#define MAX 100
int tree[MAX];
int size = 0;
void insert(int value) {
    if (size >= MAX) {
        printf("Tree is full.\n");
        return;
    }
    tree[size] = value;
    size++;
    printf("Inserted %d\n", value);
}
void inorder(int index) {
    if (index >= size)
        return;
    inorder(2 * index + 1);
    printf("%d ", tree[index]);
    inorder(2 * index + 2);
}
void preorder(int index) {
    if (index >= size)
        return;
    printf("%d ", tree[index]);
    preorder(2 * index + 1);
    preorder(2 * index + 2);
}
void postorder(int index) {
    if (index >= size)
        return;
    postorder(2 * index + 1);
    postorder(2 * index + 2);
    printf("%d ", tree[index]);
}
int search(int value) {
    for (int i = 0; i < size; i++) {
        if (tree[i] == value)
            return i;
    }
    return -1;
}
void delete(int value) {
    int pos = search(value);
    if (pos == -1) {
        printf("Value %d not found in the tree.\n", value);
        return;
    }
    printf("Deleted %d\n", tree[pos]);
    tree[pos] = tree[size - 1];
    size--;
}
void display() {
    printf("Tree (Array Representation): ");
    for (int i = 0; i < size; i++) {
        printf("%d ", tree[i]);
    }
    printf("\n");
}
int main() {
    insert(10);
    insert(20);
    insert(30);
    insert(40);
    insert(50);
    insert(60);
    display();
    printf("Inorder: ");
    inorder(0);
    printf("\n");
    printf("Preorder: ");
    preorder(0);
    printf("\n");
    printf("Postorder: ");
    postorder(0);
    printf("\n");
    int value = 30;
    if (search(value) != -1)
        printf("%d found in the tree.\n", value);
    else
        printf("%d not found in the tree.\n", value);
    delete(20);
    display();
    return 0;
}
