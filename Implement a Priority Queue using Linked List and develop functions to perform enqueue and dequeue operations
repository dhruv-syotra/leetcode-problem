#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    int priority;
    struct Node* next;
};
struct Node* front = NULL;
void enqueue(int value, int priority) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed.\n");
        return;
    }
    newNode->data = value;
    newNode->priority = priority;
    newNode->next = NULL;
    if (front == NULL || priority < front->priority) {
        newNode->next = front;
        front = newNode;
    } else {
        struct Node* temp = front;
        while (temp->next != NULL && temp->next->priority <= priority) {
            temp = temp->next;
        }
        newNode->next = temp->next;
        temp->next = newNode;
    }
    printf("Enqueued %d with priority %d\n", value, priority);
}
void dequeue() {
    if (front == NULL) {
        printf("Priority Queue Underflow. Nothing to dequeue.\n");
        return;
    }
    struct Node* temp = front;
    printf("Dequeued %d with priority %d\n", temp->data, temp->priority);
    front = front->next;
    free(temp);
}
void display() {
    if (front == NULL) {
        printf("Priority Queue is empty.\n");
        return;
    }
    struct Node* temp = front;
    printf("Priority Queue:\n");
    while (temp != NULL) {
        printf("Value: %d, Priority: %d\n", temp->data, temp->priority);
        temp = temp->next;
    }
}
int main() {
    enqueue(30, 3);
    enqueue(10, 1);
    enqueue(20, 2);
    enqueue(40, 0);
    display();
    dequeue();
    display();
    dequeue();
    dequeue();
    dequeue();
    dequeue();
    return 0;
}
