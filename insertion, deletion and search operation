#include <stdio.h>
#define MAX_SIZE 100

typedef struct {
    int data[MAX_SIZE];
    int size;
} ArrayList;

void insert(ArrayList *list, int index, int value) {
    if (list->size >= MAX_SIZE) {
        printf("Insertion failed: List is full.\n");
        return;
    }
    if (index < 0 || index > list->size) {
        printf("Insertion failed: Invalid index.\n");
        return;
    }

    for (int i = list->size; i > index; i--) {
        list->data[i] = list->data[i - 1];
    }

    list->data[index] = value;
    list->size++;
    printf("Inserted %d at index %d.\n", value, index);
}
void delete(ArrayList *list, int index) {
    if (index < 0 || index >= list->size) {
        printf("Deletion failed: Invalid index.\n");
        return;
    }

    int deleted = list->data[index];
    for (int i = index; i < list->size - 1; i++) {
        list->data[i] = list->data[i + 1];
    }
    list->size--;
    printf("Deleted value %d from index %d.\n", deleted, index);
}
int linearSearch(ArrayList *list, int value) {
    for (int i = 0; i < list->size; i++) {
        if (list->data[i] == value) {
            printf("Value %d found at index %d.\n", value, i);
            return i;
        }
    }
    printf("Value %d not found.\n", value);
    return -1;
}
void display(ArrayList *list) {
    printf("Current List: ");
    for (int i = 0; i < list->size; i++) {
        printf("%d ", list->data[i]);
    }
    printf("\n");
}
int main() {
    ArrayList list = {.size = 0};
    insert(&list, 0, 10);
    insert(&list, 1, 20);
    insert(&list, 2, 30);
    display(&list);
    linearSearch(&list, 20);
    delete(&list, 1);
    display(&list);
    return 0;
}
