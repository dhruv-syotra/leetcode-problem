#include <stdio.h>
#include<stdlib.h>
#define MAX 100
#define EMPTY -1
int bst[MAX];
void init() {
    for (int i = 0; i < MAX; i++) {
        bst[i] = EMPTY;
    }
}
void insert(int value) {
    int index = 0;
    while (index < MAX) {
        if (bst[index] == EMPTY) {
            bst[index] = value;
            printf("Inserted %d at index %d\n", value, index);
            return;
        } else if (value < bst[index]) {
            index = 2 * index + 1; 
        } else if (value > bst[index]) {
            index = 2 * index + 2; 
        } else {
            printf("Duplicate value %d not inserted.\n", value);
            return;
        }
    }
    printf("Tree is full. Cannot insert %d.\n", value);
}
void inorder(int index) {
    if (index >= MAX || bst[index] == EMPTY)
        return;
    inorder(2 * index + 1);
    printf("%d ", bst[index]);
    inorder(2 * index + 2);
}
void preorder(int index) {
    if (index >= MAX || bst[index] == EMPTY)
        return;
    printf("%d ", bst[index]);
    preorder(2 * index + 1);
    preorder(2 * index + 2);
}
void postorder(int index) {
    if (index >= MAX || bst[index] == EMPTY)
        return;
    postorder(2 * index + 1);
    postorder(2 * index + 2);
    printf("%d ", bst[index]);
}
int search(int value) {
    int index = 0;
    while (index < MAX && bst[index] != EMPTY) {
        if (bst[index] == value)
            return index;
        else if (value < bst[index])
            index = 2 * index + 1;
        else
            index = 2 * index + 2;
    }
    return -1;
}
int findMinIndex(int index) {
    while (2 * index + 1 < MAX && bst[2 * index + 1] != EMPTY)
        index = 2 * index + 1;
    return index;
}
void delete(int index, int value) {
    if (index >= MAX || bst[index] == EMPTY) {
        printf("Value %d not found in the tree.\n", value);
        return;
    }
    if (value < bst[index]) {
        delete(2 * index + 1, value);
    } else if (value > bst[index]) {
        delete(2 * index + 2, value);
    } else {
        if (bst[2 * index + 1] == EMPTY && bst[2 * index + 2] == EMPTY) {
            bst[index] = EMPTY; 
        } else if (bst[2 * index + 1] == EMPTY) {
            int right = 2 * index + 2;
            bst[index] = bst[right];
            delete(right, bst[right]);
        } else if (bst[2 * index + 2] == EMPTY) {
            int left = 2 * index + 1;
            bst[index] = bst[left];
            delete(left, bst[left]);
        } else {
            int minIndex = findMinIndex(2 * index + 2);
            bst[index] = bst[minIndex];
            delete(minIndex, bst[minIndex]);
        }
    }
}
void menu() {
    int choice, value;
    while (1) {
        printf("\nMenu:\n");
        printf("1. Insert\n");
        printf("2. Search\n");
        printf("3. Delete\n");
        printf("4. Inorder Traversal\n");
        printf("5. Preorder Traversal\n");
        printf("6. Postorder Traversal\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                insert(value);
                break;
            case 2:
                printf("Enter value to search: ");
                scanf("%d", &value);
                int pos;
                pos = search(value);
                if (pos != -1)
                    printf("Value %d found at index %d\n", value, pos);
                else
                    printf("Value %d not found\n", value);
                break;
            case 3:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                delete(0, value);
                break;
            case 4:
                printf("Inorder Traversal: ");
                inorder(0);
                printf("\n");
                break;
            case 5:
                printf("Preorder Traversal: ");
                preorder(0);
                printf("\n");
                break;
            case 6:
                printf("Postorder Traversal: ");
                postorder(0);
                printf("\n");
                break;
            case 7:
                return;
            default:
                printf("Invalid choice.\n");
        }
    }
}
int main() {
    init(); 
    menu(); 
    return 0;
}
